// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     statspoint.avsc
 */

package kafka

import (
	"encoding/binary"
	"fmt"
	"io"
	"math"
)

type ByteWriter interface {
	Grow(int)
	WriteByte(byte) error
}

type StringWriter interface {
	WriteString(string) (int, error)
}

func encodeFloat(w io.Writer, byteCount int, bits uint64) error {
	var err error
	var bb []byte
	bw, ok := w.(ByteWriter)
	if ok {
		bw.Grow(byteCount)
	} else {
		bb = make([]byte, 0, byteCount)
	}
	for i := 0; i < byteCount; i++ {
		if bw != nil {
			err = bw.WriteByte(byte(bits & 255))
			if err != nil {
				return err
			}
		} else {
			bb = append(bb, byte(bits&255))
		}
		bits = bits >> 8
	}
	if bw == nil {
		_, err = w.Write(bb)
		return err
	}
	return nil
}

func encodeInt(w io.Writer, byteCount int, encoded uint64) error {
	var err error
	var bb []byte
	bw, ok := w.(ByteWriter)
	// To avoid reallocations, grow capacity to the largest possible size
	// for this integer
	if ok {
		bw.Grow(byteCount)
	} else {
		bb = make([]byte, 0, byteCount)
	}

	if encoded == 0 {
		if bw != nil {
			err = bw.WriteByte(0)
			if err != nil {
				return err
			}
		} else {
			bb = append(bb, byte(0))
		}
	} else {
		for encoded > 0 {
			b := byte(encoded & 127)
			encoded = encoded >> 7
			if !(encoded == 0) {
				b |= 128
			}
			if bw != nil {
				err = bw.WriteByte(b)
				if err != nil {
					return err
				}
			} else {
				bb = append(bb, b)
			}
		}
	}
	if bw == nil {
		_, err := w.Write(bb)
		return err
	}
	return nil

}

func readDouble(r io.Reader) (float64, error) {
	buf := make([]byte, 8)
	_, err := io.ReadFull(r, buf)
	if err != nil {
		return 0, err
	}
	bits := binary.LittleEndian.Uint64(buf)
	val := math.Float64frombits(bits)
	return val, nil
}

func readLong(r io.Reader) (int64, error) {
	var v uint64
	buf := make([]byte, 1)
	for shift := uint(0); ; shift += 7 {
		if _, err := io.ReadFull(r, buf); err != nil {
			return 0, err
		}
		b := buf[0]
		v |= uint64(b&127) << shift
		if b&128 == 0 {
			break
		}
	}
	datum := (int64(v>>1) ^ -int64(v&1))
	return datum, nil
}

func readStatsPoint(r io.Reader) (*StatsPoint, error) {
	var str = &StatsPoint{}
	var err error
	str.Start, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.Duration, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.Measure, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Value, err = readDouble(r)
	if err != nil {
		return nil, err
	}
	str.DomainID, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.NodeUUID, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Service, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Operation, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Env, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.HTTPStatusCode, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readString(r io.Reader) (string, error) {
	len, err := readLong(r)
	if err != nil {
		return "", err
	}

	// makeslice can fail depending on available memory.
	// We arbitrarily limit string size to sane default (~2.2GB).
	if len < 0 || len > math.MaxInt32 {
		return "", fmt.Errorf("string length out of range: %d", len)
	}

	bb := make([]byte, len)
	_, err = io.ReadFull(r, bb)
	if err != nil {
		return "", err
	}
	return string(bb), nil
}

func writeDouble(r float64, w io.Writer) error {
	bits := uint64(math.Float64bits(r))
	const byteCount = 8
	return encodeFloat(w, byteCount, bits)
}

func writeLong(r int64, w io.Writer) error {
	downShift := uint64(63)
	encoded := uint64((r << 1) ^ (r >> downShift))
	const maxByteSize = 10
	return encodeInt(w, maxByteSize, encoded)
}

func writeStatsPoint(r *StatsPoint, w io.Writer) error {
	var err error
	err = writeLong(r.Start, w)
	if err != nil {
		return err
	}
	err = writeLong(r.Duration, w)
	if err != nil {
		return err
	}
	err = writeString(r.Measure, w)
	if err != nil {
		return err
	}
	err = writeDouble(r.Value, w)
	if err != nil {
		return err
	}
	err = writeString(r.DomainID, w)
	if err != nil {
		return err
	}
	err = writeString(r.NodeUUID, w)
	if err != nil {
		return err
	}
	err = writeString(r.Service, w)
	if err != nil {
		return err
	}
	err = writeString(r.Operation, w)
	if err != nil {
		return err
	}
	err = writeString(r.Env, w)
	if err != nil {
		return err
	}
	err = writeString(r.HTTPStatusCode, w)
	if err != nil {
		return err
	}

	return nil
}

func writeString(r string, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil {
		return err
	}
	if sw, ok := w.(StringWriter); ok {
		_, err = sw.WriteString(r)
	} else {
		_, err = w.Write([]byte(r))
	}
	return err
}
